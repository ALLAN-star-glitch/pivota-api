// Admin Service Prisma Schema
// https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("ADMIN_SERVICE_DATABASE_URL")
}

// ================== Role Management ==================
model Role {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  userRoles       UserRole[]       // 1-to-many users (each user only has one role)
  rolePermissions RolePermission[] // many-to-many with permissions
}

model Permission {
  id          Int       @id @default(autoincrement())
  action      String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  rolePermissions RolePermission[] // many-to-many with roles
}

// ================== Single Role Per User ==================
model UserRole {
  id       Int    @id @default(autoincrement())
  userUuid String @unique   // <-- ensures a user can only have one role
  roleId   Int

  role Role @relation(fields: [roleId], references: [id])
  @@index([roleId])
}

// ================== Role-Permission Mapping ==================
model RolePermission {
  id           Int   @id @default(autoincrement())
  roleId       Int
  permissionId Int

  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])
  @@unique([roleId, permissionId])
}

// ================== User Categories ==================
model UserCategory {
  id          Int      @id @default(autoincrement())
  userUuid    String
  categoryId  String
  verified    Boolean  @default(false)
  approvedBy  String?   // UUID of admin approving
  entityType  String   // "individual" | "organization"
  orgName     String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userUuid])
  @@index([createdAt])
}

// ================== Subscriptions ==================
model Subscription {
  id         Int      @id @default(autoincrement())
  userUuid   String
  plan       String
  premium    Boolean  @default(false)
  status     String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userUuid])
  @@index([createdAt])
}

// ================== Audit Logs ==================
model AuditLog {
  id          Int      @id @default(autoincrement())
  userUuid    String?  // optional if action not tied to a user
  action      String
  entity      String
  entityId    Int?
  performedBy String?  // UUID of admin performing action
  createdAt   DateTime @default(now())

  @@index([userUuid])
  @@index([createdAt])
}
